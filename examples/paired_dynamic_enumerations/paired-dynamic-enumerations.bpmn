<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:spiffworkflow="http://spiffworkflow.org/bpmn/schema/1.0/core" id="Definitions_96f6665" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="3.0.0-dev">
  <bpmn:process id="Process_1752591910180" isExecutable="true">
    <bpmn:endEvent id="EndEvent_1752591910180">
      <bpmn:extensionElements>
        <spiffworkflow:instructionsForEndUser>Dropdown lists,  are a </spiffworkflow:instructionsForEndUser>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_095oujx</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow2_1752591910180" sourceRef="Task_1752591910180" targetRef="Activity_05c3gpg" />
    <bpmn:userTask id="Task_1752591910180" name="Show Regular Enumerations">
      <bpmn:extensionElements>
        <spiffworkflow:properties>
          <spiffworkflow:property name="formJsonSchemaFilename" value="paired-schema.json" />
          <spiffworkflow:property name="formUiSchemaFilename" value="paired-uischema.json" />
        </spiffworkflow:properties>
        <spiffworkflow:instructionsForEndUser />
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1fkhurf</bpmn:incoming>
      <bpmn:outgoing>Flow2_1752591910180</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:sequenceFlow id="Flow_1fkhurf" sourceRef="Activity_0nn49t9" targetRef="Task_1752591910180" />
    <bpmn:manualTask id="Activity_0nn49t9" name="Show Method 1">
      <bpmn:extensionElements>
        <spiffworkflow:instructionsForEndUser>SpiffWorkflow's User Task Form Builder's uses react-jsonschema-forms (rjsf) to build the forms presented to end users.  Dropdown lists in rjsf are defined in the JsonSchema section as follows for the quotes:
&lt;pre&gt;
  "full_quote": {
    "type": "string",
    "title": "Select Yogism to complete",
    "enum": [
      "If you don't know where you are going, you might wind up someplace else.",
      "When you come to a fork in the road, take it.",
      "Nobody goes there anymore. It's too crowded."
    ],
&lt;/pre&gt;
Although rjsf denotes the list displayed in the dropdown as an enum, also known as an enumeration.  Technically, an enumeration is a paired set of lists. To accomplish this, another list, named `enumNames`, can be added immediately after the `enum` list, like this:
&lt;pre&gt;
  "enumNames": [
    "If your don't know where your are going, your..."
    "When you come to a fork in the road,...",
    "Nobody goes there anymore. It's..."
  ]
&lt;/pre&gt;
With this addition, the user will be presented with the list specified in `enumNames`, and when a selection is made the corresponding value in the `enum` list is added to the Task Data.

The same pattern is followed for prizes.  To see this in more detail, click on the _Show Regular Enum_ User Task and launch the Web Form Editor.</spiffworkflow:instructionsForEndUser>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0wey3mr</bpmn:incoming>
      <bpmn:outgoing>Flow_1fkhurf</bpmn:outgoing>
    </bpmn:manualTask>
    <bpmn:sequenceFlow id="Flow_0wey3mr" sourceRef="Activity_110usu2" targetRef="Activity_0nn49t9" />
    <bpmn:manualTask id="Activity_110usu2" name="Show Intro">
      <bpmn:extensionElements>
        <spiffworkflow:instructionsForEndUser>This example shows how a User Task form dropdown field can be enhanced so it can be used for a wider range of possibilities in SpiffWorkflow. 

The two enhancements presented in this example are:
- pairing a simple dropdown list with another list so the items presented in the dropdown can be linked to another set of value.  Programatically, this is referred to as an enumeration.  A common use of this would be showing a description of an inventory item in the dropdown and when one is selected, linking it with the part number for that item.
- transforming from a pair of hard coded lists to a pair of  dynamic lists, so the vaules displayed can be updated dynamically, i.e., programmatically each time there is a change to the lists.

Two sets of paired lists will be used in this example.  The first set will consist of three Yogi Berra quotes, or Yogisms, and the second set will contain three prizes.  

The example will first show how a regular (non-dynamic) paired enumeration is specified in the SpiffWorkflow User Task Web Form Editor.  

Next it will show how the paired lists can be built from data, assumingly pulled from an outside source, in a SpiffWorkFlow Script Task and then injected into the User Task form using Jinja.

And then it will show how DMN tables can be used to maintain the data internally and how they can be updated.</spiffworkflow:instructionsForEndUser>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0988pgu</bpmn:incoming>
      <bpmn:outgoing>Flow_0wey3mr</bpmn:outgoing>
    </bpmn:manualTask>
    <bpmn:manualTask id="Activity_05c3gpg" name="Show Method 2">
      <bpmn:extensionElements>
        <spiffworkflow:instructionsForEndUser>For the next part of the example, the hardcoded `enum` and `enumNames` lists for quotes and prizes will be built in the _Build Dynamic Enumersation_ Script Task.  This scenario would be used if the data to be used was pulled from an external source.  For the purposes of this example, it is entered in the Script Task, e.g., for the prizes:
&lt;pre&gt;
  prizes = [
    {"Description": "Luxury Yacht", "Stock No": "TR-003"},
    {"Description": "Skatebaord", "Stock No": "TR-122"},
    {"Description": "Socks", "Stock No": "TR-128"}
  ]
&lt;/pre&gt;
This data was transformed into the format needed for the paired enumeration lists with the following Python code:
&lt;pre&gt;
  # Build Prizes enums
  prizes_enum = []
  prizes_enum_names = []

  for p in prizes:
      prizes_enum.append(p["Stock No"])
      prizes_enum_names.append(p["Description"])
&lt;/pre&gt;
The lists `prizes_enum` and `prizes_enum_names` are then injected into the JsonSchema as shown here:
&lt;pre&gt;
  "prize": {
      "type": "string",
      "title": "Select prize if you are correct",
      "enum": &amp;lbrace;&amp;lbrace; prizes_enum|tojson &amp;rbrace;&amp;rbrace;,
      "enumNames": &amp;lbrace;&amp;lbrace; prizes_enum_names|tojson &amp;rbrace;&amp;rbrace;
    }
&lt;/pre&gt;
Note that the Jinja `|tojson` filter is used since the lists are objects.</spiffworkflow:instructionsForEndUser>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow2_1752591910180</bpmn:incoming>
      <bpmn:outgoing>Flow_1j2lbix</bpmn:outgoing>
    </bpmn:manualTask>
    <bpmn:scriptTask id="Activity_0wbzcer" name="Build Dynamic Enumeration">
      <bpmn:incoming>Flow_1j2lbix</bpmn:incoming>
      <bpmn:outgoing>Flow_1dez374</bpmn:outgoing>
      <bpmn:script># Delete previously set variables
del(end_quote)
del(full_quote)
del(prize)

# Set Quote and Prize data
quotes = [
    {"full": "If you don't know where you are going, you might wind up someplace else.", "partial": "If you don't know where you are going, you..."}
    {"full": "When you come to a fork in the road, take it.", "partial": "When you come to a fork in the road,..."},
    {"full": "Nobody goes there anymore. It's too crowded.", "partial": "Nobody goes there anymore. It's..."}
]
prizes = [
    {"Description": "Luxury Yacht", "Stock No": "TR-003"},
    {"Description": "Skatebaord", "Stock No": "TR-122"},
    {"Description": "Socks", "Stock No": "TR-128"}
]

# Build Quotes enums
quotes_enum = []
quotes_enum_names = []

for q in quotes:
    quotes_enum.append(q["full"])
    quotes_enum_names.append(q["partial"])

# Build Prizes enums
prizes_enum = []
prizes_enum_names = []

for p in prizes:
    prizes_enum.append(p["Stock No"])
    prizes_enum_names.append(p["Description"])

# Delete unneeded variables
del(p)
del(q)
del(quotes)
del(prizes)</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_127atyl" sourceRef="Activity_10m6kun" targetRef="Activity_1daq7z3" />
    <bpmn:userTask id="Activity_10m6kun" name="Show Dynamic Enumerations">
      <bpmn:extensionElements>
        <spiffworkflow:properties>
          <spiffworkflow:property name="formJsonSchemaFilename" value="dynamic-paired-schema.json" />
          <spiffworkflow:property name="formUiSchemaFilename" value="dynamic-paired-uischema.json" />
        </spiffworkflow:properties>
        <spiffworkflow:instructionsForEndUser />
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1dez374</bpmn:incoming>
      <bpmn:outgoing>Flow_127atyl</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:manualTask id="Activity_1daq7z3" name="Show Method 3">
      <bpmn:extensionElements>
        <spiffworkflow:instructionsForEndUser>In this next section of the example, the quotes and prizes data will be obtained from DMN tables.  Two DMN tables, one for the quotes and the other for the prizes, where created.  The one for quotes will be used to explain how it is used to build the paired enumeration lists.

The DMN table was built with two outputs, whose names were `full_quote` and `partial_quote`.  A row with each of the paired enumerations was added and the Hit Policy was set to Collect.  When the DMN table was processed with this Hit Policy, it ouputs two lists, each with the name of the output column.  The `full_quote` list looks like this:
&lt;pre&gt;
  [
  "If you don't know where you are going, your might wind up someplce else.",
  "When you come to a fork in the road, take it.",
  "Nobody goes there anymore. It's too crowded."
  ]
&lt;/pre&gt;
In the _Build Dynamic Enumerations_ Script Task, the Python code to build the respective enumeration list is:
&lt;pre&gt;
  
&lt;/pre&gt;</spiffworkflow:instructionsForEndUser>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_127atyl</bpmn:incoming>
      <bpmn:outgoing>Flow_07e2k1q</bpmn:outgoing>
    </bpmn:manualTask>
    <bpmn:sequenceFlow id="Flow_1ln3if4" sourceRef="Activity_1oikj5p" targetRef="Activity_0jlr8hi" />
    <bpmn:businessRuleTask id="Activity_1oikj5p" name="Collect Quote Lists">
      <bpmn:extensionElements>
        <spiffworkflow:calledDecisionId>Paired_Quote_Lists</spiffworkflow:calledDecisionId>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_07e2k1q</bpmn:incoming>
      <bpmn:outgoing>Flow_1ln3if4</bpmn:outgoing>
    </bpmn:businessRuleTask>
    <bpmn:sequenceFlow id="Flow_0czzdzh" sourceRef="Activity_0jlr8hi" targetRef="Activity_0c9anjo" />
    <bpmn:businessRuleTask id="Activity_0jlr8hi" name="Collect Prize Lists">
      <bpmn:extensionElements>
        <spiffworkflow:calledDecisionId>Paired_Prize_Lists</spiffworkflow:calledDecisionId>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1ln3if4</bpmn:incoming>
      <bpmn:outgoing>Flow_0czzdzh</bpmn:outgoing>
    </bpmn:businessRuleTask>
    <bpmn:sequenceFlow id="Flow_0g0l0sm" sourceRef="Activity_0c9anjo" targetRef="Activity_05d7hg5" />
    <bpmn:scriptTask id="Activity_0c9anjo" name="Build Dynamic Enumerations">
      <bpmn:incoming>Flow_0czzdzh</bpmn:incoming>
      <bpmn:outgoing>Flow_0g0l0sm</bpmn:outgoing>
      <bpmn:script># Delete previously set variables
del(end_quote)
del(prize)
del(quotes_enum)
del(quotes_enum_names)
del(prizes_enum)
del(prizes_enum_names)

# Build Quotes enums
quotes_enum = []
quotes_enum_names = []

for i in range(len(full_quote)):
  quotes_enum.append(full_quote[i])

for i in range(len(partial_quote)):
  quotes_enum_names.append(partial_quote[i])

# Build Prizes enums
prizes_enum = []
prizes_enum_names = []

for i in range(len(stock_no)):
  prizes_enum.append(stock_no[i])

for i in range(len(description)):
  prizes_enum_names.append(description[i])

# Delete unneeded variables
del(i)
del(full_quote)
del(partial_quote)
del(description)
del(stock_no)</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_1dez374" sourceRef="Activity_0wbzcer" targetRef="Activity_10m6kun" />
    <bpmn:sequenceFlow id="Flow_1j2lbix" sourceRef="Activity_05c3gpg" targetRef="Activity_0wbzcer" />
    <bpmn:startEvent id="Event_1iact4g">
      <bpmn:outgoing>Flow_0988pgu</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:userTask id="Activity_05d7hg5" name="Show Dynamic Enumerations">
      <bpmn:extensionElements>
        <spiffworkflow:properties>
          <spiffworkflow:property name="formJsonSchemaFilename" value="dynamic-paired-schema.json" />
        </spiffworkflow:properties>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0g0l0sm</bpmn:incoming>
      <bpmn:outgoing>Flow_0y4tzsq</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:sequenceFlow id="Flow_07e2k1q" sourceRef="Activity_1daq7z3" targetRef="Activity_1oikj5p" />
    <bpmn:sequenceFlow id="Flow_08s6pqt" sourceRef="Activity_1ui6xrm" targetRef="Activity_1noadcs" />
    <bpmn:manualTask id="Activity_1ui6xrm" name="Show Method 4">
      <bpmn:extensionElements>
        <spiffworkflow:instructionsForEndUser>The last section of this example shows how the DMN tables can be updated and the same Script Task is used to produce updated paired enumeration lists.</spiffworkflow:instructionsForEndUser>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0y4tzsq</bpmn:incoming>
      <bpmn:outgoing>Flow_08s6pqt</bpmn:outgoing>
    </bpmn:manualTask>
    <bpmn:sequenceFlow id="Flow_0bjkgb8" sourceRef="Activity_1noadcs" targetRef="Activity_00ymrp6" />
    <bpmn:businessRuleTask id="Activity_1noadcs" name="Collect Updated Quote Lists">
      <bpmn:extensionElements>
        <spiffworkflow:calledDecisionId>Paired_Quote_Lists_Updated</spiffworkflow:calledDecisionId>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_08s6pqt</bpmn:incoming>
      <bpmn:outgoing>Flow_0bjkgb8</bpmn:outgoing>
    </bpmn:businessRuleTask>
    <bpmn:sequenceFlow id="Flow_0c62x20" sourceRef="Activity_00ymrp6" targetRef="Activity_1xpzcuy" />
    <bpmn:businessRuleTask id="Activity_00ymrp6" name="Collect Updated Prize Lists">
      <bpmn:extensionElements>
        <spiffworkflow:calledDecisionId>Paired_Prize_Lists_Updated</spiffworkflow:calledDecisionId>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0bjkgb8</bpmn:incoming>
      <bpmn:outgoing>Flow_0c62x20</bpmn:outgoing>
    </bpmn:businessRuleTask>
    <bpmn:sequenceFlow id="Flow_0dzgm82" sourceRef="Activity_1xpzcuy" targetRef="Activity_1oeqbsu" />
    <bpmn:scriptTask id="Activity_1xpzcuy" name="Build Dynamic Enumerations">
      <bpmn:incoming>Flow_0c62x20</bpmn:incoming>
      <bpmn:outgoing>Flow_0dzgm82</bpmn:outgoing>
      <bpmn:script># Delete previously set variables
# del(end_quote)
# del(prize)
# del(quotes_enum)
# del(quotes_enum_names)
# del(prizes_enum)
# del(prizes_enum_names)

# Build Quotes enums
quotes_enum = []
quotes_enum_names = []

for i in range(len(full_quote)):
  quotes_enum.append(full_quote[i])

for i in range(len(partial_quote)):
  quotes_enum_names.append(partial_quote[i])

# Build Prizes enums
prizes_enum = []
prizes_enum_names = []

for i in range(len(stock_no)):
  prizes_enum.append(stock_no[i])

for i in range(len(description)):
  prizes_enum_names.append(description[i])

# Delete unneeded variables
del(i)
del(full_quote)
del(partial_quote)
del(description)
del(stock_no)</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0ts787a" sourceRef="Activity_1oeqbsu" targetRef="Activity_0g2syyr" />
    <bpmn:userTask id="Activity_1oeqbsu" name="Show Updated Dynamic Enumerations">
      <bpmn:extensionElements>
        <spiffworkflow:properties>
          <spiffworkflow:property name="formJsonSchemaFilename" value="dynamic-paired-schema.json" />
        </spiffworkflow:properties>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0dzgm82</bpmn:incoming>
      <bpmn:outgoing>Flow_0ts787a</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:sequenceFlow id="Flow_0y4tzsq" sourceRef="Activity_05d7hg5" targetRef="Activity_1ui6xrm" />
    <bpmn:sequenceFlow id="Flow_0988pgu" sourceRef="Event_1iact4g" targetRef="Activity_110usu2" />
    <bpmn:sequenceFlow id="Flow_095oujx" sourceRef="Activity_0g2syyr" targetRef="EndEvent_1752591910180" />
    <bpmn:manualTask id="Activity_0g2syyr" name="Show Conclusion">
      <bpmn:extensionElements>
        <spiffworkflow:instructionsForEndUser>A dropdown list is a common and useful UI form element.  In SpiffWorkflow, the react-jsonschema-forms (rjsf) React component allows for building a simple dropdown based on a single list or an enumeration based on a pair of lists.

SpiffWorkflow allow you to make either of these two approaches dynamic with the introduction of Jinja into the rjsf code.  This allows the Process Architect to pull the element for these lists from an external source and format for use in the dropdown, both simple and paired.</spiffworkflow:instructionsForEndUser>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0ts787a</bpmn:incoming>
      <bpmn:outgoing>Flow_095oujx</bpmn:outgoing>
    </bpmn:manualTask>
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1752591910180">
      <bpmndi:BPMNShape id="EndEvent_1752591910180_di" bpmnElement="EndEvent_1752591910180">
        <dc:Bounds x="2762" y="142" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1rips3m_di" bpmnElement="Task_1752591910180">
        <dc:Bounds x="260" y="120" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1u40vv5_di" bpmnElement="Activity_0nn49t9">
        <dc:Bounds x="90" y="120" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0loo593_di" bpmnElement="Activity_110usu2">
        <dc:Bounds x="-70" y="120" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0kdp2ra_di" bpmnElement="Activity_05c3gpg">
        <dc:Bounds x="430" y="120" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_166q8hz_di" bpmnElement="Activity_0wbzcer">
        <dc:Bounds x="590" y="120" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_02sxvvp_di" bpmnElement="Activity_10m6kun">
        <dc:Bounds x="760" y="120" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_19btpdz_di" bpmnElement="Activity_1daq7z3">
        <dc:Bounds x="930" y="120" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_12nsv82_di" bpmnElement="Activity_1oikj5p">
        <dc:Bounds x="1090" y="120" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0bcehmz_di" bpmnElement="Activity_0jlr8hi">
        <dc:Bounds x="1250" y="120" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1cxxse1_di" bpmnElement="Activity_0c9anjo">
        <dc:Bounds x="1420" y="120" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1iact4g_di" bpmnElement="Event_1iact4g">
        <dc:Bounds x="-178" y="142" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_14oljjo_di" bpmnElement="Activity_05d7hg5">
        <dc:Bounds x="1590" y="120" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1s6u58f_di" bpmnElement="Activity_1ui6xrm">
        <dc:Bounds x="1760" y="120" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_194yesc_di" bpmnElement="Activity_1noadcs">
        <dc:Bounds x="1930" y="120" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1hvjbb9_di" bpmnElement="Activity_00ymrp6">
        <dc:Bounds x="2100" y="120" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1c71ukt_di" bpmnElement="Activity_1xpzcuy">
        <dc:Bounds x="2270" y="120" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_17us1ql_di" bpmnElement="Activity_1oeqbsu">
        <dc:Bounds x="2440" y="120" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1i9pkvl_di" bpmnElement="Activity_0g2syyr">
        <dc:Bounds x="2610" y="120" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow2_1752591910180_di" bpmnElement="Flow2_1752591910180">
        <di:waypoint x="360" y="160" />
        <di:waypoint x="430" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1fkhurf_di" bpmnElement="Flow_1fkhurf">
        <di:waypoint x="190" y="160" />
        <di:waypoint x="260" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0wey3mr_di" bpmnElement="Flow_0wey3mr">
        <di:waypoint x="30" y="160" />
        <di:waypoint x="90" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_127atyl_di" bpmnElement="Flow_127atyl">
        <di:waypoint x="860" y="160" />
        <di:waypoint x="930" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1ln3if4_di" bpmnElement="Flow_1ln3if4">
        <di:waypoint x="1190" y="160" />
        <di:waypoint x="1250" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0czzdzh_di" bpmnElement="Flow_0czzdzh">
        <di:waypoint x="1350" y="160" />
        <di:waypoint x="1420" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0g0l0sm_di" bpmnElement="Flow_0g0l0sm">
        <di:waypoint x="1520" y="160" />
        <di:waypoint x="1590" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1dez374_di" bpmnElement="Flow_1dez374">
        <di:waypoint x="690" y="160" />
        <di:waypoint x="760" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1j2lbix_di" bpmnElement="Flow_1j2lbix">
        <di:waypoint x="530" y="160" />
        <di:waypoint x="590" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_07e2k1q_di" bpmnElement="Flow_07e2k1q">
        <di:waypoint x="1030" y="160" />
        <di:waypoint x="1090" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_08s6pqt_di" bpmnElement="Flow_08s6pqt">
        <di:waypoint x="1860" y="160" />
        <di:waypoint x="1930" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0bjkgb8_di" bpmnElement="Flow_0bjkgb8">
        <di:waypoint x="2030" y="160" />
        <di:waypoint x="2100" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0c62x20_di" bpmnElement="Flow_0c62x20">
        <di:waypoint x="2200" y="160" />
        <di:waypoint x="2270" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0dzgm82_di" bpmnElement="Flow_0dzgm82">
        <di:waypoint x="2370" y="160" />
        <di:waypoint x="2440" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0ts787a_di" bpmnElement="Flow_0ts787a">
        <di:waypoint x="2540" y="160" />
        <di:waypoint x="2610" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0y4tzsq_di" bpmnElement="Flow_0y4tzsq">
        <di:waypoint x="1690" y="160" />
        <di:waypoint x="1760" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0988pgu_di" bpmnElement="Flow_0988pgu">
        <di:waypoint x="-142" y="160" />
        <di:waypoint x="-70" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_095oujx_di" bpmnElement="Flow_095oujx">
        <di:waypoint x="2710" y="160" />
        <di:waypoint x="2762" y="160" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
